Metadata-Version: 2.4
Name: agent-builder
Version: 0.1.0
Summary: Add your description here
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: openai>=1.0.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: pocketflow==0.0.1
Requires-Dist: aiohttp>=3.8.0
Requires-Dist: json-repair>=0.45.0
Requires-Dist: dynaconf>=3.1.12

<h1 align="center">Pocket Flow Project Template: Agentic Coding</h1>

<p align="center">
  <a href="https://github.com/The-Pocket/PocketFlow" target="_blank">
    <img 
      src="./assets/banner.png" width="800"
    />
  </a>
</p>

This is a project template for Agentic Coding with [Pocket Flow](https://github.com/The-Pocket/PocketFlow), a 100-line LLM framework, and your editor of choice.

- We have included the [.cursorrules](.cursorrules), [.clinerules](.clinerules), and [.windsurfrules](.windsurfrules) files to let Cursor AI (also Cline, or Windsurf) help you build LLM projects.
  
- Want to learn how to build LLM projects with Agentic Coding?

  - Check out the [Agentic Coding Guidance](https://the-pocket.github.io/PocketFlow/guide.html)
    
  - Check out the [YouTube Tutorial](https://www.youtube.com/@ZacharyLLM?sub_confirmation=1)

# Requirements Generation/Optimization Engine

An AI-powered system that helps analyze natural language requirements, suggest optimizations, and generate structured technical documentation.

## Features

- **Natural Language Processing**: Accept requirements descriptions in natural language
- **Markdown Support**: Process markdown documents as input
- **Asynchronous Processing**: Non-blocking operations for responsive user experience
- **Iterative Refinement**: Multi-round interactions to refine requirements and documentation
- **Structured Documentation**: Generate technical documentation that meets industry standards

## Installation

1. Clone the repository:
   ```
   git clone <repository-url>
   cd agent-builder
   ```

2. Install the required dependencies:
   ```
   pip install -r requirements.txt
   ```

3. Set up your OpenAI API key:
   ```
   export OPENAI_API_KEY="your_api_key_here"
   ```

## Usage

### Interactive Mode

Run the application in interactive mode to engage in a conversation:

```
python main.py --interactive
```

### Command-line Mode

Process a single requirement and save the documentation:

```
python main.py --input "Create a web application for task management with user authentication" --output "documentation.md"
```

Include markdown files for additional context:

```
python main.py --input "Build an e-commerce system" --files requirements.md design_notes.md --output "documentation.md"
```

## Project Structure

- `main.py`: Entry point for the application
- `flow.py`: Defines the workflow for requirement processing
- `nodes.py`: Implementation of the processing nodes
- `utils/`: Utility functions
  - `call_llm.py`: LLM interaction utilities
  - `parse_markdown.py`: Markdown processing utilities
  - `format_documentation.py`: Documentation formatting utilities
  - `store_conversation.py`: Conversation management utilities

## License

[MIT License](LICENSE)
