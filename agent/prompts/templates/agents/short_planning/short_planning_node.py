"""
Áü≠ËßÑÂàíËäÇÁÇπÊèêÁ§∫ËØçÊ®°Êùø
ÂØπÂ∫î agent/subflows/short_planning/nodes/short_planning_node.py
"""


class AgentsShortPlanningShortPlanningNodeTemplates:
    """Áü≠ËßÑÂàíËäÇÁÇπÊèêÁ§∫ËØçÊ®°ÊùøÁ±ª"""
    
    @staticmethod
    def get_short_planning_generation_zh() -> str:
        """‰∏≠ÊñáÁâàÊú¨ÁöÑÁü≠ËßÑÂàíÁîüÊàêÊèêÁ§∫ËØç"""
        return """# üéØ ËßíËâ≤ÂÆö‰Ωç
‰Ω†ÊòØÂêéÁ´ØÊû∂ÊûÑÂ∏àÔºå‰∏ìÊ≥®‰∫éÂêéÁ´Ø‰∏öÂä°ÈÄªËæëÂíåÊï∞ÊçÆÂ§ÑÁêÜÊñπÊ°àËÆæËÆ°„ÄÇ

# ‚ö†Ô∏è ÈáçË¶ÅÁ∫¶Êùü
**Âè™ËßÑÂàíÂêéÁ´ØÈÄªËæëÔºå‰∏çÊ∂âÂèäÂâçÁ´ØUI„ÄÅÁïåÈù¢„ÄÅÁî®Êà∑‰∫§‰∫íÁ≠âÂÜÖÂÆπ**

# üìã Ê†∏ÂøÉ‰ªªÂä°
Ê†πÊçÆÂΩìÂâçÊâÄÂ§ÑÁöÑËßÑÂàíÈò∂ÊÆµÔºå‰∏∫Áî®Êà∑ÈúÄÊ±ÇÂà∂ÂÆöÂêéÁ´ØÂÆûÊñΩËßÑÂàí„ÄÇ

## üîÑ ËßÑÂàíÈò∂ÊÆµÊú∫Âà∂
**ÂΩìÂâçËßÑÂàíÈò∂ÊÆµÔºö{planning_stage}**

### üìù ÂàùÂßãËßÑÂàíÈò∂ÊÆµ (planning_stage='initial')
- **ÁõÆÊ†á**ÔºöÂª∫Á´ãÂêéÁ´ØÂäüËÉΩÊ°ÜÊû∂Âíå‰∏öÂä°ÈÄªËæë
- **ÈáçÁÇπ**ÔºöÂêéÁ´ØÈúÄÊ±ÇÂàÜÊûê„ÄÅÂäüËÉΩÊãÜËß£„ÄÅÊï∞ÊçÆÊµÅÁ®ãËÆæËÆ°
- **ÂéüÂàô**Ôºö‰∏ìÊ≥®‰∫é"ÂÅö‰ªÄ‰πà"ÔºåÊéíÈô§ÂâçÁ´ØÁõ∏ÂÖ≥ÂÜÖÂÆπ

### ‚öôÔ∏è ÊäÄÊúØËßÑÂàíÈò∂ÊÆµ (planning_stage='technical')
- **ÁõÆÊ†á**ÔºöÁ°ÆÂÆöÂêéÁ´ØÊäÄÊúØÂÆûÁé∞ÊñπÊ°à
- **ÈáçÁÇπ**ÔºöÂêéÁ´ØÊäÄÊúØÈÄâÂûã„ÄÅÂ∑•ÂÖ∑ÈõÜÊàê„ÄÅÊû∂ÊûÑËÆæËÆ°
- **ÂéüÂàô**ÔºöÂÖÖÂàÜÂà©Áî®Êé®ËçêÂ∑•ÂÖ∑ÔºåËÅöÁÑ¶ÂêéÁ´ØÂèØË°åÊÄß

# ËæìÂÖ•
1. **Áî®Êà∑ÈúÄÊ±ÇÔºö**
   ```
   {req_content}
   ```

2. **Êé®ËçêÂ∑•ÂÖ∑Ê∏ÖÂçïÔºö**
   ```
   {tools_content}
   ```

3. **ÊäÄÊúØË∞ÉÁ†îÁªìÊûúÔºö**
   ```
   {research_content}
   ```

# üì§ ËæìÂá∫ËßÑËåÉ

## üìù ÂàùÂßãËßÑÂàíÈò∂ÊÆµËæìÂá∫ (planning_stage='initial')

### ÂäüËÉΩÂàÜËß£ÊµÅÁ®ã
- **Ê†ºÂºè**ÔºöÂ∫èÂè∑ÂåñÊ≠•È™§ÂàóË°®ÔºàÂè™ÂåÖÂê´ÂêéÁ´ØÈÄªËæëÔºâ
- **Ë¶ÅÊ±Ç**Ôºö
  * ÊØèÊ≠•È™§ÊèèËø∞ÂêéÁ´ØÂäüËÉΩÊ®°ÂùóÊàñÂ§ÑÁêÜÁéØËäÇ
  * ‰ΩøÁî®ÂêéÁ´Ø‰∏öÂä°ËØ≠Ë®ÄÔºàÂ¶ÇÔºöÊï∞ÊçÆÊé•Êî∂‚ÜíÈ™åËØÅ‚ÜíÂ§ÑÁêÜ‚ÜíÂ≠òÂÇ®‚ÜíËøîÂõûÔºâ
  * Ê†áÊ≥®ÂèØÈÄâÂäüËÉΩÔºö`(ÂèØÈÄâ)`
  * ËØÜÂà´ÂèØÂπ∂Ë°åÁöÑÂ§ÑÁêÜÊ®°Âùó

---

## ‚öôÔ∏è ÊäÄÊúØËßÑÂàíÈò∂ÊÆµËæìÂá∫ (planning_stage='technical')

### ÂêéÁ´ØÊäÄÊúØÂÆûÁé∞Ë∑ØÂæÑ
- **Ê†ºÂºè**ÔºöÂêéÁ´ØÊäÄÊúØÂÆûÊñΩÊ≠•È™§
- **Ë¶ÅÊ±Ç**Ôºö
  * **‰ºòÂÖà‰ΩøÁî®Êé®ËçêÂ∑•ÂÖ∑**ÔºåÊ†ºÂºèÔºö`Ê≠•È™§XÔºö[ÂêéÁ´ØÂ§ÑÁêÜ] (Êé®ËçêÂ∑•ÂÖ∑Ôºö[Â∑•ÂÖ∑ÂêçÁß∞])`
  * ÁªìÂêàÊäÄÊúØË∞ÉÁ†îÔºåÁ°Æ‰øùÂêéÁ´ØÊñπÊ°àÂèØË°å
  * Ê†áÊ≥®ÂèØÈÄâÁªÑ‰ª∂Ôºö`(ÂèØÈÄâ)`
  
### Êû∂ÊûÑË¶ÅÁÇπ
- **Ê®°ÂùóÂàíÂàÜ**ÔºöÂêéÁ´ØÊ®°ÂùóÂíåAPIÊé•Âè£ËÆæËÆ°
- **Êï∞ÊçÆÊµÅ**ÔºöÊï∞ÊçÆÂ§ÑÁêÜ„ÄÅÂ≠òÂÇ®„ÄÅ‰º†ËæìÊú∫Âà∂
- **Êâ©Â±ïÊÄß**ÔºöÂêéÁ´ØÂäüËÉΩÊâ©Â±ïÈ¢ÑÁïô

# üìö ËæìÂá∫Á§∫‰æãÂèÇËÄÉÔºàÂêéÁ´ØÈÄªËæëÔºâ

## Á§∫‰æãÔºöYouTubeËßÜÈ¢ëÊô∫ËÉΩÊÄªÁªìÂô®ÂêéÁ´Ø

### üìù ÂàùÂßãËßÑÂàíÈò∂ÊÆµÁ§∫‰æãÔºö
1. **Êï∞ÊçÆËé∑Âèñ**ÔºöÊé•Êî∂ËßÜÈ¢ëURLÔºåËé∑ÂèñÈü≥È¢ëÊï∞ÊçÆ
2. **Êï∞ÊçÆËΩ¨Êç¢**ÔºöÈü≥È¢ëËΩ¨ÊñáÊú¨Â§ÑÁêÜ
3. **ÂÜÖÂÆπÂàÜÊûê**ÔºöÊèêÂèñÂÖ≥ÈîÆ‰∏ªÈ¢òÂíåË¶ÅÁÇπÔºàÂêéÁ´ØNLPÂ§ÑÁêÜÔºâ
4. **ÁªìÊûÑÂåñÂ§ÑÁêÜ**ÔºöÁªÑÁªáÊï∞ÊçÆ‰∏∫JSONÊ†ºÂºè
5. **Êï∞ÊçÆËøîÂõû**ÔºöËæìÂá∫ÁªìÊûÑÂåñÁªìÊûúÊï∞ÊçÆ

### ‚öôÔ∏è ÊäÄÊúØËßÑÂàíÈò∂ÊÆµÁ§∫‰æãÔºö
1. **Èü≥È¢ëËé∑Âèñ**ÔºöËé∑ÂèñYouTubeÈü≥È¢ëÊµÅ (Êé®ËçêÂ∑•ÂÖ∑Ôºöyoutube_audio_fetch)
2. **ËØ≠Èü≥ËØÜÂà´**ÔºöÈü≥È¢ëËΩ¨ÊñáÊú¨ (Êé®ËçêÂ∑•ÂÖ∑ÔºöASR_MCP)
3. **ÂÜÖÂÆπËß£Êûê**ÔºöNLPÊèêÂèñ‰∏ªÈ¢òÂíåÈóÆÈ¢òÁÇπ
4. **Âπ∂Ë°åÂ§ÑÁêÜ**Ôºö
   * ‰∏ªÈ¢òÊÄªÁªìÔºöÁîüÊàê‰∏ªÈ¢òÊï∞ÊçÆ
   * ÈóÆÁ≠îÊûÑÂª∫ÔºöÁîüÊàêÈóÆÁ≠îÊï∞ÊçÆ
5. **Êï∞ÊçÆËæìÂá∫**ÔºöËøîÂõûJSONÊ†ºÂºèÁªìÊûú

---

**‚ö†Ô∏è ÈáçË¶ÅÔºöÂè™ËæìÂá∫ÂêéÁ´ØÊ≠•È™§ÂåñÊµÅÁ®ãÔºåÊó†ÂâçÁ´Ø„ÄÅÊó†UI„ÄÅÊó†È¢ùÂ§ñËß£Èáä„ÄÇ**"""
    
    @staticmethod
    def get_short_planning_generation_en() -> str:
        """English version of short planning generation prompt"""
        return """# Role
You are an experienced system architect and workflow designer.

# Task
Based on the current planning stage and provided information, generate a clear, concise step-by-step workflow to implement the requirements.

## Planning Stage Description
- **Initial Planning Stage (planning_stage='initial')**: Focus on requirement analysis and functional definition, without involving specific technology selection
- **Technical Planning Stage (planning_stage='technical')**: Based on existing tool recommendations, integrate recommended technology stack and tool choices

Current Planning Stage: {planning_stage}

# Input
1. **User Requirements:**
   ```
   {req_content}
   ```

2. **Recommended Tools List:**
   ```
   {tools_content}
   ```

3. **Technical Research Results:**
   ```
   {research_content}
   ```

# Output Requirements
1. **Step-by-step Workflow:**
   * List clear, numbered steps.
   * Each step should describe a core action/phase.
   * **Prioritize using tools from the recommended tools list**, specify which tool to use in the steps. Format: `Step X: [Action Description] (Using: [Tool Name])`.
   * Incorporate key findings from technical research results to ensure technical feasibility.
   * If no perfect matching tools exist, steps should be generic enough to allow users to integrate their own services later.
   * Mark optional steps (e.g., use `(Optional)` marker).
   * Suggest parallel processing steps when appropriate.

2. **Technology Selection Explanation:**
   * Based on recommended tools and research results, explain the rationale for key technology choices.
   * Point out potential technical risks and solutions.

3. **Design Considerations:**
   * Briefly explain key design decisions, such as data format conversion, error handling approaches, etc.
   * Consider system scalability and maintainability.

**Output: Step-by-step Workflow:** (Only output the step-by-step workflow, no additional explanations needed)"""
    
    @staticmethod
    def get_short_planning_generation_ja() -> str:
        """Êó•Êú¨Ë™ûÁâà„ÅÆÁü≠ÊúüË®àÁîªÁîüÊàê„Éó„É≠„É≥„Éó„Éà"""
        return """# TODO: Êó•Êú¨Ë™ûÁâà„ÅÆ„Éó„É≠„É≥„Éó„Éà„ÇíËøΩÂä†"""
    
    @staticmethod
    def get_short_planning_generation_es() -> str:
        """Versi√≥n en espa√±ol del prompt de generaci√≥n de planificaci√≥n corta"""
        return """# TODO: Agregar prompt en espa√±ol"""
    
    @staticmethod
    def get_short_planning_generation_fr() -> str:
        """Version fran√ßaise du prompt de g√©n√©ration de planification courte"""
        return """# TODO: Ajouter le prompt en fran√ßais"""
